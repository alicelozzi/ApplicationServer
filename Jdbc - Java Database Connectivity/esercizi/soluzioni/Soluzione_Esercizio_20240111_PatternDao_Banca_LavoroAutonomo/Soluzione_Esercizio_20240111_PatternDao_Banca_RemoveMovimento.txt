--- Aggiunte nella classe QueryCatalog le due seguenti query:

    public static final String selectFromClienteSenzaConto = 
    		  " SELECT cl.codice_fiscale, cl.nominativo, cl.indirizzo "
    		+ " FROM cliente cl LEFT JOIN conto co ON cl.codice_fiscale = co.codice_fiscale " 
    		+ " WHERE co.iban IS NULL "; 
	
    public static final String selectFromContoByCodiceFiscale = 
          " SELECT iban, codice_fiscale, valuta, saldo, scoperto, data_ora_intestazione	"
  		+ "   FROM conto co  " 
  		+ "  WHERE co.codice_fiscale = ? "; 
	

--- Aggiunto nella classe ClienteoDao il metodo:

	public List<Cliente> loadClienteSenzaConto() 
								throws BancaModelException {

		List<Cliente> elencoClientiSenzaConto = new ArrayList<Cliente>();

		try {

			PreparedStatement preparedStatement = this.jdbcConnectionToDatabase
					.prepareStatement(QueryCatalog.selectFromClienteSenzaConto);

			elencoClientiSenzaConto = loadClientiByQuery(preparedStatement);

		} catch (SQLException sqlException) {

			throw new BancaModelException("ClienteDao -> loadClienteSenzaConto -> " + sqlException.getMessage());
		}

		return elencoClientiSenzaConto;

	}

--- Aggiunto nella classe ContoDao il metodo:

	public List<Conto> loadContoByCodiceFiscale(String codiceFiscale) throws BancaModelException {

		List<Conto> elencoContiByCodiceFiscale = new ArrayList<Conto>();

		try {

			PreparedStatement preparedStatement = this.jdbcConnectionToDatabase
					.prepareStatement(QueryCatalog.selectFromContoByCodiceFiscale);

            preparedStatement.setString(1, codiceFiscale);

			elencoContiByCodiceFiscale = loadContiByQuery(preparedStatement);

		} catch (SQLException sqlException) {

			throw new BancaModelException("ContoDao -> loadContoByCodiceFiscale -> " + sqlException.getMessage());
		}

		return elencoContiByCodiceFiscale;

	}

	

--- Aggiunte alcune istruzioni nel metodo main() della classe TestJdbcBanca:

	public static void main(String[] args) {
		
		
		try {
			...................................







			/*--------------------------------------------------------------------------------*/
			/*
			 * a) stampare l'elenco dei clienti senza conto 
			 */
			List<Cliente> clientiSenzaConto=testJdbcBanca.clienteDao.loadClienteSenzaConto();
			System.out.println("Elenco clienti senza conto: ");
			System.out.println(clientiSenzaConto);
			
			/*
			 * b) aggiungere un conto per uno dei clienti senza conto
			 * c) aggiungere un ulteriore conto per il cliente di cui al punto b)
			 * 	  => addConto() => metodo implementato precedentemente => ContoDao	
			 */
	
			Cliente cliente=null;
			if (clientiSenzaConto.size() == 0) {
				System.out.println("Non ci sono Clienti senza conti!!!");
			}
			else {		//quando abbiamo almeno un cliente senza conto
				cliente = clientiSenzaConto.get(0);
				Conto conto = new Conto("ITcc0213456789012345678901234567", cliente.getCodiceFiscale(), "EUR", 876.0f); 
				testJdbcBanca.contoDao.addConto(conto);
				Conto conto1 = new Conto("ITzz2213456489012343678401234567", cliente.getCodiceFiscale(), "EUR", 92347.0f);
				testJdbcBanca.contoDao.addConto(conto1);
			}
			
			/*	
			 * d) stampare i conti del cliente per cui si sono aggiunto i due conti
			 * 
			 * => loadContiCliente(), metodo loadContiByCodiceFiscaleCliente()/loadContiByNominativoCliente()=> ContoDao		
			*/
			List<Conto> elencoContiCliente = testJdbcBanca.contoDao.loadContoByCodiceFiscale(cliente.getCodiceFiscale());
			
			System.out.println("\nElenco conti aggiunti al cliente: ");
			System.out.println(elencoContiCliente);
			

			
		} catch (BancaModelException bancaModelException) {
			System.out.println(bancaModelException.getMessage());
		} 
	
	}

